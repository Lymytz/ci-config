name: lymytz_ci_template

on:
  workflow_call:
    secrets:
      REPOSITORY_TOKEN:
        required: true
      SONAR_TOKEN:
        required: false
      SONAR_HOST_URL:
        required: false
      VM_HOST:
        required: false
      VM_SSH_KEY:
        required: false
      VM_USER:
        required: false
    inputs:
      repository_username:
        type: string
        required: false
        default: ${{github.repository_owner}}
      java_version:
        type: string
        required: true
      app_module:
        type: string
        required: false
        default: 'app'
      fat_jar_name:
        type: string
        required: false
        default: 'app'
      compile_opt:
        type: string
        required: false
        default: ''
      project_key:
        type: string
        required: false
      project_name:
        type: string
        required: false
jobs:
  Compile:
    name: Compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{inputs.java_version}}
          distribution: temurin
      - name: Pre-Compile # Préparation du maven-settings (download & update credential)
        run: |
          echo " récupération du template settings.xml"
          curl -sSL --fail -o settings_template.xml https://raw.githubusercontent.com/Lymytz/ci_actions/main/settings.xml
      - name: Apply credential
        run: |
          sed "s|__USERNAME__|${{inputs.repository_username}}|g" settings_template.xml > settings.xml
          sed -i "s|__PASSWORD__|${{secrets.REPOSITORY_TOKEN}}|g" settings.xml
      - name: Move settings.xml
        run: |
          echo "HOME is $HOME"
          mkdir -p "$HOME/.m2"
          mv --force settings.xml "$HOME/.m2/"
        shell: bash
      - name: Compilation
        run: |
          echo "Compilation avec la distribution"
          java -version
          mvn ${{inputs.compile_opt}} --settings "$HOME/.m2/settings.xml" -DskipTests package
      - run: ls -l ./app
      - run: ls -l ./app/target
      - name: Upload compile class
        uses: actions/upload-artifact@v4
        with:
          name: compiled-classes
          path: '**/target/classes'
      - name: Upload fat-jar
        uses: actions/upload-artifact@v4
        with:
          name: 'app-fat-jar'
          path: ${{inputs.app_module}}/target/*.jar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: "$HOME/.m2/repository"
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
  UnitTest:
    if: false # activer si besoin de faire des tests unitaires
    needs: Compile
    name: Test Unitaire
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{inputs.java_version}}
          cache: 'maven'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: "$HOME/.m2/repository"
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Pre-Test
        run: |
          echo " récupération du template settings.xml"
          curl -sSL --fail -o settings_template.xml https://raw.githubusercontent.com/Lymytz/ci_actions/main/settings.xml
          sed "s|__USERNAME__|${{inputs.repository_username}}|g" settings_template.xml > settings.xml
          sed -i "s|__PASSWORD__|${{secrets.REPOSITORY_TOKEN}}|g" settings.xml
          mkdir -p "$HOME/.m2"
          mv --force settings.xml "$HOME/.m2/"
        shell: bash
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: compiled-classes
          path: .
      - name: Run test with coverage
        run: |
          mvn verify -Dmaven.test.skip=false -Dmaven.main.skip=true
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: report-coverage
          path:
            aggregate-report/target/
  IntegrationTest:  # requiere la présence d'un profile intégration dans le pom
    if: false # activer si besoin de faire des tests d'intégration
    needs: Compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{inputs.java_version}}
          cache: 'maven'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: "$HOME/.m2/repository"
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Pre-Test
        run: |
          echo " récupération du template settings.xml"
          curl -sSL --fail -o settings_template.xml https://raw.githubusercontent.com/Lymytz/ci_actions/main/settings.xml
          sed "s|__USERNAME__|${{inputs.repository_username}}|g" settings_template.xml > settings.xml
          sed -i "s|__PASSWORD__|${{secrets.REPOSITORY_TOKEN}}|g" settings.xml
          mkdir -p "$HOME/.m2"
          mv --force settings.xml "$HOME/.m2/"
        shell: bash
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: compiled-classes
          path: .
      - name: Run tests
        run: |
          mvn verify -Pintegration -Dmaven.compile.skip=true
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: report-integration-coverage
          path: aggregate-report/target/


  QualityCheck:  # Lancer l'analyse sonar, envoyer les rapports TU à sonar
    if: false # activer si besoin de faire des tests d'intégration
    needs:
      - IntegrationTest
      - UnitTest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{inputs.java_version}}
          cache: 'maven'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: "$HOME/.m2/repository"
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Pre-Test
        run: |
          echo " récupération du template settings.xml"
          curl -sSL --fail -o settings_template.xml https://raw.githubusercontent.com/Lymytz/ci_actions/main/settings.xml
          sed "s|__USERNAME__|${{inputs.repository_username}}|g" settings_template.xml > settings.xml
          sed -i "s|__PASSWORD__|${{secrets.REPOSITORY_TOKEN}}|g" settings.xml
          mkdir -p "$HOME/.m2"
          mv --force settings.xml "$HOME/.m2/"
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: report-coverage
          path: .
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: compiled-classes
          path: .
      - name: Check jacoco report
        run: |
          find . -name jacoco.xml
      - name: Sonar analysis
        env:
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
          SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}
          PROJECT_KEY: ${{inputs.project_key}}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=$(pwd)/site/jacoco-aggregate/jacoco.xml \
          org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.projectKey=$PROJECT_KEY  \
          -Dsonar.projectName=$PROJECT_NAME \
          -Dmaven.test.skip=true
        continue-on-error: true
      - name: Sonar Quality Gate Status
        run: |
          if [ $? -ne 0 ]; then
            echo "::warning:: problème de qualité détecté"
          else
            echo "Sonar Quality Gate passed"
          fi
  BuildImage:
    needs: Compile
    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write
    steps:
      - run: echo "Start buildind docker image"
      - name: Télécharger le docker file
        run: |
          echo 
          echo "Récupération du docker file depuis le repo Lymytz/ci_actions"
          curl -sSL --fail -o Dockerfile https://raw.githubusercontent.com/Lymytz/ci_actions/refs/heads/main/dockerFiles/Dockerfile
          if [[ ! -f Dockerfile ]]; then
            ls -l
            echo "::error ::Dockerfile introuvable. Échec du téléchargement."
            exit 1
          fi
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: app-fat-jar
          path: .
      - name: login ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.project_key }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: JAR_FILE=${{inputs.fat_jar_name}}.jar
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Deploy:
    needs: BuildImage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref=='refs/heads/main'
    steps:
      - run: echo "Deploy application..."
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Créer le docker context pour la VM
        run: |
          docker context create vm --docker "host=ssh://${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{secrets.VM_PORT}}" || echo "le context existe déjà"
          docker context use vm
      - name: Login to GHCR (on VM via docker context)
        run: |
          docker --context vm login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_PAT }}
      - name: Pull and Run the image
        run: |
            IMAGE=ghcr.io/${{ github.repository_owner }}/${{ inputs.project_key }}:${{needs.BuildImage.outputs.IMAGE_TAG || 'latest'}}
            docker --context vm pull $IMAGE
            # Arrêter et supprimer le conteneur existant s'il existe
            docker --context vm rm -f ${{ inputs.project_key }} || echo "no container to remove"
            # Démarrer un nouveau conteneur
            docker --context vm run -d --name ${{ inputs.project_key }} -p 8090:8090 $IMAGE