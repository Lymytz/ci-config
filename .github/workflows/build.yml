
name: Build & Test

on:
  workflow_call:
    secrets:
      TOKEN_CI:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
    inputs:
      github_username:
        required: true
        description: Nom d'utilisateur github
        type: string
      packaging:
        required: false
        type: boolean
      java_version:
        required: false
        type: string
        default: '17'
      project_key:
        type: string
        required: false
      project_name:
        type: string
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: Lymytz/ci_actions/maven-compiler@v2
        with:
          java_version: ${{ inputs.java_version }}
          github_user_name: ${{ secrets.GITHUB_USER }}
          github_token: ${{ secrets.TOKEN_CI }}
      - name: Compilation maven
        run: |
          if [ "${{ inputs.java_version }}" == "17" ]
          then
            mvn compile -Pjava17
          elif [ "${{ inputs.java_version }}" == "21" ]
          then
            mvn compile -Pjava21
          else
            echo "Version de java non supportée : ${{ inputs.java_version }}"
            exit 1
          fi
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: Lymytz/ci_actions/maven-compiler@v2
        with:
          java_version: ${{ inputs.java_version }}
          github_user_name: ${{ secrets.GITHUB_USER }}
          github_token: ${{ secrets.TOKEN_CI }}
      - run: echo "SONAR_HOST_URL starts with => ${SONAR_HOST_URL:0:8}"
      - name: Run Tests and Coverage Check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          PROJECT_KEY: ${{ inputs.project_key }}
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          CMD="mvn -B verify"
          if [[ -n "$PROJECT_KEY" ]]; then
            CMD="$CMD org.sonarsource.scanner.maven:sonar-maven-plugin:sonar"
            CMD="$CMD -Dsonar.host.url=$SONAR_HOST_URL"
            CMD="$CMD -Dsonar.projectKey=$PROJECT_KEY"
            CMD="$CMD -Dsonar.projectName=PROJECT_NAME"
          fi
          echo "Commande executée : $CMD"
          eval "$CMD"
        shell: bash
      - name: Upload Surefire HTML report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/index.html

  packaging:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ inputs.packaging && inputs.packaging == true && github.refs == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{inputs.java_version}}

      - name: setup maven settings
        run: |
          mkdir -p $HOME/.m2
          cp settings.xml $HOME/.m2/
          sed -i "s|{{PASSWORD}}|${{ secrets.TOKEN_CI }}|g" $HOME/.m2/settings.xml
          sed -i "s|{{USERNAME}}|alabienG|g" $HOME/.m2/settings.xml
          cat $HOME/.m2/settings.xml

      - name: Extratc version
        id: extract_version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "artifact=$ARTIFACT_ID" >> $GITHUB_OUTPUT

      - name: Check if version already exists
        id: check_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN_CI }}
        run: |
          OWNER=${{ github.repository_owner }}
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          PACKAGE_NAME=${{ steps.extract_version.outputs.artifact }}
          VERSION=${{ steps.extract_version.outputs.version }}

          echo "Checking for version $VERSION of $PACKAGE_NAME in $OWNER/$REPO..."

          VERSIONS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/users/$OWNER/packages/maven/$PACKAGE_NAME/versions")

          if echo "$VERSIONS" | grep -q "\"name\":\s*\"$VERSION\""; then
             echo "Version $VERSION already exists. Skipping deployment."
             echo "skip_deploy=true" >> $GITHUB_OUTPUT
          else
             echo "Version $VERSION does not exist. Proceeding with deployment."
             echo "skip_deploy=false" >> $GITHUB_OUTPUT

      - name: Package Project
        if: steps.check_version.outputs.skip_deploy == 'false'
        run: mvn deploy -DskipTests


